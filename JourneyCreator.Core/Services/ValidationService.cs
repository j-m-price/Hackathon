using JourneyCreator.Core.Interfaces;
using JourneyCreator.Core.Models;
using JourneyCreator.Core.Enums;
using System.Collections.Generic;
using System.Linq;

namespace JourneyCreator.Core.Services
{
    public class ValidationService : IValidationService
    {
        // Use FluentValidation? It looks pretty cool.

        public bool Validate(Journey journey)
        {
            // we'll want to return a custom error type here.
            // Bool is just a placeholder obviously.
            if (!ValidateJourneyId(journey.Id)) return false;
            if (!ValidateProduct(journey.Product)) return false;
            if (!ValidatePublisher(journey.Publisher)) return false;
            if (!ValidateGcSelectQuestions(journey.Pages)) return false;


            if (!ValidateGTMSettings(journey.GTMSettings)) return false;

            return true;
        }

        private bool ValidateGcSelectQuestions(IEnumerable<Page> pages)
        {
            foreach (var page in pages)
            {
                foreach (var question in page.Questions)
                {
                    var isSelect = question.Type == QuestionType.GcSelect;
                    var optionCount = question.Options.ToList().Count;
                    
                    if (isSelect && optionCount == 0) return false;
                }
            }

            return true;
        }

        private bool ValidateJourneyId(int id)
        {
            /*
                Journey Id will be generated by DB
                No need to validate, it'll be ignored
            */

            return true;
        }

        private bool ValidateProduct(string product)
        {
            return !string.IsNullOrWhiteSpace(product)
                && product.Length > 2
                && product.Length < 30;
        }

        private bool ValidatePublisher(string publisher)
        {
            /*
                To improve:
                    Use name of logged in user
            */

            return !string.IsNullOrWhiteSpace(publisher)
                && publisher.Length > 4
                && publisher.Length < 50;
        }

        private bool ValidateGTMSettings(GTMSettings settings)
        {
            /*
                To check:
                    - settings must not be null
                    - Excluded must not be null
                    - Frequency must not ne null
                    - Frequency must not be whitespace only
                    - (Fill in more test cases)
            */

            if (settings == null) return false;
            if (settings.Excluded == null) return false;
            if (string.IsNullOrWhiteSpace(settings.Frequency)) return false;

            return true;
        }
    }
}
